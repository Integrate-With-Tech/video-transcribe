name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.9

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install FFmpeg using chocolatey
        choco install ffmpeg -y

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 black mypy
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type check with mypy
      run: |
        mypy transcribe_batch.py --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on mypy issues initially

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test script syntax
      run: |
        python -m py_compile transcribe_batch.py

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Check for security vulnerabilities
      run: |
        # Check for known security vulnerabilities
        safety check --file requirements.txt || true
        pip-audit --requirement requirements.txt || true

    - name: Check for outdated dependencies
      run: |
        pip list --outdated || true

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test video
      run: |
        # Create a simple test video using FFmpeg
        mkdir -p input_mp4
        ffmpeg -f lavfi -i "testsrc2=duration=5:size=320x240:rate=1" -f lavfi -i "sine=frequency=1000:duration=5" -c:v libx264 -c:a aac -shortest input_mp4/test.mp4

    - name: Test script execution (dry run)
      run: |
        # Test that the script can parse arguments and show help
        python transcribe_batch.py --help
        # Test argument validation
        python transcribe_batch.py run --help || true

    - name: Test with tiny model (quick integration test)
      run: |
        # Run with the smallest model for a quick test
        timeout 300 python transcribe_batch.py run \
          --input input_mp4 \
          --output test_outputs \
          --model tiny \
          --language en \
          --compute-type int8 \
          --beam 1 \
          --summarizer none \
          --timeout 120 \
          --retries 1 \
          --progress-timeout 60 || echo "Integration test completed (may timeout on small test file)"

    - name: Check outputs
      run: |
        # Verify that output structure was created
        ls -la test_outputs/ || echo "No outputs created"
        find test_outputs/ -name "*.txt" -o -name "*.srt" -o -name "*.vtt" -o -name "*.md" | head -10 || echo "No output files found"